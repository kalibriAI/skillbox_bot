import asyncio
from pprint import pprint

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
import datetime
from asyncio import sleep
from asyncpg import Pool
from typing import Union

from model.errors import HotelAlredyRememdered
from states.castom_machine import HotelSearchMachine
from api.request import get_city_request
from model.types import HotelInfo, CheckInOutDate
from api.request import get_hotels_request
from keyboard.inline import choose_sort_type, choose_search_type, make_hotel_page
from keyboard.default import scroll_hotel_keyboard
from service.bfuncs import make_total_days, insert_hotel
from const import *

user_router = Router()


@user_router.message(Command('search'), StateFilter(None))
async def search_cmd(message: Message, state: FSMContext):
    await message.answer(start_message, reply_markup=choose_search_type())
    await state.set_state(HotelSearchMachine.search_type)
    await state.set_state(HotelSearchMachine.search_type)


@user_router.message(Command('stop'), StateFilter('*'))
async def help_cmd(message: Message, state):
    await state.clear()
    await message.answer('–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω!')


@user_router.callback_query(HotelSearchMachine.search_type, F.data == 'search_by_cord')
async def search_by_cord_query(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(search_by_coordinates_message)
    await state.set_state(HotelSearchMachine.latitude)


@user_router.message(HotelSearchMachine.latitude)
async def input_latitude_cmd(message: Message, state: FSMContext):
    try:
        float(message.text)

    except ValueError:
        await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')

    else:
        if -90 < float(message.text) < 90:
            await message.answer('<b>‚úÖ–®–∏—Ä–æ—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤–µ—Ä–Ω–æ!</b>\n\n - –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ <b>–¥–æ–ª–≥–æ—Ç—É</b>:')
            await state.update_data(latitude=float(message.text))
            await state.set_state(HotelSearchMachine.longitude)
            return


@user_router.message(HotelSearchMachine.longitude)
async def input_latitude_cmd(message: Message, state: FSMContext):
    try:
        float(message.text)

    except ValueError:
        await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')

    else:
        if -180 < float(message.text) < 180:
            await message.answer(location_got_succes_message)
            await state.update_data(longitude=float(message.text))
            await state.set_state(HotelSearchMachine.check_in)
            return


@user_router.callback_query(HotelSearchMachine.search_type, F.data == 'search_by_location')
async def search_by_location_query(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        'üîé<b>–í—ã–±—Ä–∞–Ω –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é.</b>\n\n - –¢–µ–ø–µ—Ä—å –í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤—Ç—å –≤–∞—à—É –≥–µ–æ-–ª–æ–∫–∞—Ü–∏—é:')
    await state.set_state(HotelSearchMachine.location)


@user_router.message(HotelSearchMachine.location, F.location)
async def search_by_location_cmd(message: Message, state: FSMContext):
    await state.update_data(latitude=message.location.latitude, longitude=message.location.longitude)
    await message.answer(location_got_succes_message)
    await state.set_state(HotelSearchMachine.check_in)


@user_router.callback_query(HotelSearchMachine.search_type, F.data == 'search_by_city')
async def search_by_dest_query(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        'üîé<b>–í—ã–±—Ä–∞–Ω –ø–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º/–≥–æ—Ä–æ–¥–∞–º.</b>\n\n - –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <b>–≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—ã</b> —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏ –Ω–∞ –∞–Ω–≥–ª. —è–∑—ã–∫–µ.')
    await state.set_state(HotelSearchMachine.destination)


@user_router.message(HotelSearchMachine.destination)
async def search_by_dest_cmd(message: Message, pool):
    async with pool.acquire() as con:
        key = await con.fetchrow('select key from users where id = $1', message.from_user.id)
    city = message.text
    try:
        await message.answer('üîéüìç–£—Ç–æ—á–Ω–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ', reply_markup=get_city_request(city, key['key']))
    except PermissionError as e:
        await message.answer(str(e))


@user_router.callback_query(F.data.startswith('dest'))
async def destination_callback_query(callback: CallbackQuery, state: FSMContext):
    region_id = callback.data.split('dest')[1]
    await state.update_data(region_id=region_id)
    await callback.message.answer(location_got_succes_message)
    await state.set_state(HotelSearchMachine.check_in)


@user_router.message(HotelSearchMachine.check_in)
async def set_check_in_cmd(message: Message, state: FSMContext):
    try:
        day, month, year = list(map(int, message.text.split('.')))

    except Exception as e:
        print(e)

    else:
        today_year, today_month, today_day = datetime.date.today().year, datetime.date.today().month, datetime.date.today().day
        if ((1 <= day <= 31) and (today_day <= day)) and ((1 <= month <= 12) and (today_month <= month)) and (
                today_year <= year):
            date = CheckInOutDate(day=day, month=month, year=year)
            await state.update_data(check_in=date)
            await message.answer(
                '‚úÖ<b>–î–∞—Ç–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è —É—Å–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</b>.\n\n - –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã—Å–µ–ª–µ–Ω–∏—è –∏–∑ –æ—Ç–µ–ª—è, –ø–æ —Ç–æ–º—É –∂–µ —Ñ–æ—Ä–º–∞—Ç—É:')
            await state.set_state(HotelSearchMachine.check_out)
        else:
            msg = await message.answer('–£–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞!')
            await asyncio.sleep(2)
            await msg.delete()
            await message.delete()


@user_router.message(HotelSearchMachine.check_out)
async def set_check_out_cmd(message: Message, state: FSMContext):
    try:
        day, month, year = list(map(int, message.text.split('.')))

    except Exception as e:
        print(e)

    else:
        data = await state.get_data()
        check_in = data['check_in']
        if ((1 <= day <= 31) and (day >= check_in.day)) and ((1 <= month <= 12) and (month >= check_in.month)) and (
                year >= check_in.year):
            date = CheckInOutDate(day=day, month=month, year=year)
            await state.update_data(check_out=date)
            await message.answer('‚úÖ–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–µ–ª–∏.',
                                 reply_markup=choose_sort_type())
            await state.set_state(HotelSearchMachine.sort)
        else:
            msg = await message.answer('–£–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞!')
            await asyncio.sleep(2)
            await msg.delete()
            await message.delete()


@user_router.callback_query(F.data.startswith('sort'), HotelSearchMachine.sort)
async def set_sort_type_query(callback: CallbackQuery, state: FSMContext, pool):
    sort_type = callback.data.split('sort_')[1]
    if sort_type in ['lowest', 'highest']:
        await state.update_data(cmd=sort_type)
        await show_result(callback, state, pool)
    else:
        await state.update_data(cmd=sort_type)
        await callback.message.answer(
            '‚úÖ<b>–¢–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –æ—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω.</b>\n\n–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–ª-–≤–æ –æ—Ç–ª–µ–π.\n–ü–æ–∏—Å–∫ –≤—ã–¥–∞—Å—Ç —Å—Ç–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–µ–ª–µ–π —Å–∫–æ–ª—å–∫–æ –≤—ã –≤–≤–µ–¥–µ—Ç–µ, –ª–∏–±–æ –∂–µ –µ—Å–ª–∏ –∏—Ö –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ –ø–æ–∏—Å–∫ –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ. \n\n - –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:')
        await state.set_state(HotelSearchMachine.result_size)


@user_router.message(HotelSearchMachine.result_size)
async def set_result_size_cmd(message: Message, state: FSMContext):
    try:
        int(message.text)
    except ValueError:
        temp = await message.answer('–í–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
        await asyncio.sleep(2)
        await temp.delete()
        await message.delete()
    else:
        if message.text.isdigit() and int(message.text) <= 30:
            await state.update_data(result_size=int(message.text))
            await message.answer(
                '‚úÖ<b>–í–∏–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤—ã–±—Ä–∞–Ω!</b>\n\n - –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤–∞—à–µ–≥–æ –±—É–¥–∂–µ—Ç–∞.\nüíµ–î–ª—è –Ω–∞—á–∞–ª–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ')
            await state.set_state(HotelSearchMachine.min_price)
        else:
            await message.answer(
                '–ó–∞ —Ä–∞–∑ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 30 –æ—Ç–µ–ª–µ–π, –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –¥–æ–ª–≥–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤.')


@user_router.message(HotelSearchMachine.min_price)
async def set_min_price_cmd(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(min_price=int(message.text))
        await message.answer('üíé–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞.')
        await state.set_state(HotelSearchMachine.max_price)


@user_router.message(HotelSearchMachine.max_price)
async def set_max_price_cmd(message: Message, state: FSMContext, pool: Pool):
    if message.text.isdigit():
        await state.update_data(max_price=int(message.text))
        await show_result(message, state, pool)


async def show_result(event: Union[Message, CallbackQuery], state: FSMContext, pool: Pool):
    async with pool.acquire() as con:
        api_key = await con.fetchrow('select key from users where id = $1', event.from_user.id)

    if isinstance(event, CallbackQuery):
        event = event.message

    await event.answer('‚úÖ<b>–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ!</b>\n‚úâÔ∏è–≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.')
    data = await state.get_data()
    try:
        hotels = get_hotels_request(data, api_key['key'])
    except ValueError as e:
        print('error - ', e)
        await event.answer(
            '<b>‚ùóÔ∏è–ß—Ç–æ —Ç–æ –ø–æ—à–ª–µ –Ω–µ —Ç–∞–∫. –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω‚ùóÔ∏è</b>\n\n–í–æ–∑–º–æ–∂–æ:\n     ‚Ä¢ –Ω–µ –≤–µ—Ä–Ω—ã–π –∫–ª—é—á –∞–ø–∏\n     ‚Ä¢ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã\n     ‚Ä¢ –æ—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n     ‚Ä¢ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–µ–ª–µ–π!')
    else:
        total_days = make_total_days(data)
        await state.clear()
        await state.update_data(hotels=hotels, scroll_index=0, total_days=total_days)
        data = await state.get_data()
        page = make_hotel_page(data)
        await event.answer('‚úÖ<b>–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!</b>', reply_markup=scroll_hotel_keyboard())
        media_group = await event.answer_media_group(media=page[0])
        info = await event.answer(page[1])
        await state.update_data(current_hotel=(media_group, info))


@user_router.message(F.text == '<')
async def scroll_left_button(message: Message, state: FSMContext):
    await message.delete()
    data = await state.get_data()
    index = data['scroll_index']

    if index >= 1:
        try:
            await state.update_data(scroll_index=index - 1)
            data = await state.get_data()
            page = make_hotel_page(data)
            media_group = await message.answer_media_group(media=page[0])
            info = await message.answer(page[1])
            await state.update_data(current_hotel=(media_group, info))
        except IndexError:
            await state.update_data(scroll_index=index + 1)
            notify = await message.answer('–≠—Ç–æ –ø–µ—Ä–≤—ã—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ª–∏—Å—Ç–∞—Ç—å –Ω–∞–∑–∞–¥!')
            await sleep(2)
            await notify.delete()
        else:
            for msg in data['current_hotel'][0]:
                await msg.delete()
            await data['current_hotel'][1].delete()


@user_router.message(F.text == '>')
async def scroll_left_button(message: Message, state: FSMContext):
    await message.delete()
    data = await state.get_data()
    index = data['scroll_index']

    try:
        await state.update_data(scroll_index=index + 1)
        data = await state.get_data()

        page = make_hotel_page(data)
        media_group = await message.answer_media_group(media=page[0])
        info = await message.answer(page[1])
        await state.update_data(current_hotel=(media_group, info))
    except IndexError:
        await state.update_data(scroll_index=index - 1)
        notify = await message.answer('–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ª–∏—Å—Ç–∞—Ç—å –≤–ø–µ—Ä–µ–¥!')
        await sleep(2)
        await notify.delete()
    else:
        for msg in data['current_hotel'][0]:
            await msg.delete()
        await data['current_hotel'][1].delete()


@user_router.message(F.text == '–í—ã–±—Ä–∞—Ç—å‚úÖ')
async def choose_hotel_cmd(message: Message, state: FSMContext, pool: Pool):
    data = await state.get_data()
    hotels, index = data['hotels'], data['scroll_index']
    current_hotel: HotelInfo = data['hotels'][index]
    try:
        await insert_hotel(current_hotel, pool, message.from_user.id)
    except HotelAlredyRememdered as eroor:
        error_message = await message.answer(str(eroor))
        await asyncio.sleep(3)
        await error_message.delete()

    else:
        await message.answer(
            f'<b>–í—ã–±—Ä–∞–Ω –æ—Ç–µ–ª—å - {hotels[index].name}</b>\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–æ–ª–µ–π –∫–æ–º–∞–Ω–¥–æ–π - <code>/history</code>',
            reply_markup=ReplyKeyboardRemove())
        for msg in data['current_hotel'][0]:
            await msg.delete()
        await data['current_hotel'][1].delete()

    finally:
        await message.delete()

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
import datetime
from asyncio import sleep
from asyncpg import Pool

from telegram_bot.states.castom_machine import HotelSearchMachine
from telegram_bot.api.request import get_city_request
from telegram_bot.model.types import CheckInOutDate, HotelInfo
from telegram_bot.api.request import get_hotels_request
from telegram_bot.keyboard.inline import choose_sort_type, choose_search_type, make_hotel_page
from telegram_bot.keyboard.default import scroll_hotel_keyboard
from telegram_bot.service.bfuncs import make_total_days, insert_hotel
from telegram_bot.const import *

user_router = Router()


@user_router.message(Command('search'))
async def search_cmd(message: Message, state: FSMContext):
    await message.answer(start_message, reply_markup=choose_search_type())
    await state.set_state(HotelSearchMachine.search_type)


@user_router.callback_query(HotelSearchMachine.search_type, F.data == 'search_by_cord')
async def search_by_cord_query(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(search_by_coordinates_message)
    await state.set_state(HotelSearchMachine.latitude)


@user_router.message(HotelSearchMachine.latitude)
async def input_latitude_cmd(message: Message, state: FSMContext):
    try:
        float(message.text)

    except ValueError:
        await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')

    else:
        if -90 < float(message.text) < 90:
            await message.answer('<b>‚úÖ–®–∏—Ä–æ—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤–µ—Ä–Ω–æ!</b>\n\n - –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ <b>–¥–æ–ª–≥–æ—Ç—É</b>:')
            await state.update_data(latitude=float(message.text))
            await state.set_state(HotelSearchMachine.longitude)
            return


@user_router.message(HotelSearchMachine.longitude)
async def input_latitude_cmd(message: Message, state: FSMContext):
    try:
        float(message.text)

    except ValueError:
        await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')

    else:
        if -180 < float(message.text) < 180:
            await message.answer(location_got_succes_message)
            await state.update_data(longitude=float(message.text))
            await state.set_state(HotelSearchMachine.check_in)
            return


@user_router.callback_query(HotelSearchMachine.search_type, F.data == 'search_by_location')
async def search_by_location_query(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        'üîé<b>–í—ã–±—Ä–∞–Ω –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é.</b>\n\n - –¢–µ–ø–µ—Ä—å –í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤—Ç—å –≤–∞—à—É –≥–µ–æ-–ª–æ–∫–∞—Ü–∏—é:')
    await state.set_state(HotelSearchMachine.location)


@user_router.message(HotelSearchMachine.location, F.location)
async def search_by_location_cmd(message: Message, state: FSMContext):
    await state.update_data(latitude=message.location.latitude, longitude=message.location.longitude)
    await message.answer(location_got_succes_message)
    await state.set_state(HotelSearchMachine.check_in)


@user_router.callback_query(HotelSearchMachine.search_type, F.data == 'search_by_city')
async def search_by_dest_query(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        'üîé<b>–í—ã–±—Ä–∞–Ω –ø–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º/–≥–æ—Ä–æ–¥–∞–º.</b>\n\n - –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <b>–≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—ã</b> —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏ –Ω–∞ –∞–Ω–≥–ª. —è–∑—ã–∫–µ.')
    await state.set_state(HotelSearchMachine.destination)


@user_router.message(HotelSearchMachine.destination)
async def search_by_dest_cmd(message: Message):
    city = message.text
    await message.answer('üîéüìç–£—Ç–æ—á–Ω–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ', reply_markup=get_city_request(city))


@user_router.callback_query(F.data.startswith('dest'))
async def destination_callback_query(callback: CallbackQuery, state: FSMContext):
    region_id = callback.data.split('dest')[1]
    await state.update_data(region_id=region_id)
    await callback.message.answer(location_got_succes_message)
    await state.set_state(HotelSearchMachine.check_in)


@user_router.message(HotelSearchMachine.check_in)
async def set_check_in_cmd(message: Message, state: FSMContext):
    try:
        day, month, year = list(map(int, message.text.split('.')))

    except Exception as e:
        print(e)

    else:
        today_year = datetime.date.today().year
        if (1 <= day <= 31) and (1 <= month <= 12) and (year >= today_year):
            date = CheckInOutDate(day=day, month=month, year=year)
            await state.update_data(check_in=date)
            await message.answer(
                '‚úÖ<b>–î–∞—Ç–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è —É—Å–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</b>.\n\n - –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã—Å–µ–ª–µ–Ω–∏—è –∏–∑ –æ—Ç–µ–ª—è, –ø–æ —Ç–æ–º—É –∂–µ —Ñ–æ—Ä–º–∞—Ç—É:')
            await state.set_state(HotelSearchMachine.check_out)


@user_router.message(HotelSearchMachine.check_out)
async def set_check_out_cmd(message: Message, state: FSMContext):
    try:
        day, month, year = list(map(int, message.text.split('.')))

    except Exception as e:
        print(e)

    else:
        today_year = datetime.date.today().year
        if (1 <= day <= 31) and (1 <= month <= 12) and (year >= today_year):
            date = CheckInOutDate(day=day, month=month, year=year)
            await state.update_data(check_out=date)
            await message.answer(
                '‚úÖ<b>–î–∞—Ç–∞ –≤—ã—Å–µ–ª–µ–Ω–∏—è —É—Å–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.</b>\n\n–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–ª-–≤–æ –æ—Ç–ª–µ–π.\n–ü–æ–∏—Å–∫ –≤—ã–¥–∞—Å—Ç —Å—Ç–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–µ–ª–µ–π —Å–∫–æ–ª—å–∫–æ –≤—ã –≤–≤–µ–¥–µ—Ç–µ, –ª–∏–±–æ –∂–µ –µ—Å–ª–∏ –∏—Ö –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ –ø–æ–∏—Å–∫ –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ. \n\n - –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:')
            await state.set_state(HotelSearchMachine.result_size)


@user_router.message(HotelSearchMachine.result_size)
async def set_result_size_cmd(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(result_size=int(message.text))
        await message.answer('‚úÖ–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–µ–ª–∏.',
                             reply_markup=choose_sort_type())
        await state.set_state(HotelSearchMachine.sort)


@user_router.callback_query(F.data.startswith('sort'), HotelSearchMachine.sort)
async def set_sort_type_query(callback: CallbackQuery, state: FSMContext):
    sort_type = callback.data.split('sort_')[1]
    await state.update_data(sort_type=sort_type)
    await callback.message.answer(
        '‚úÖ<b>–í–∏–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤—ã–±—Ä–∞–Ω!</b>\n\n - –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤–∞—à–µ–≥–æ –±—É–¥–∂–µ—Ç–∞.\nüíµ–î–ª—è –Ω–∞—á–∞–ª–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ')
    await state.set_state(HotelSearchMachine.min_price)


@user_router.message(HotelSearchMachine.min_price)
async def set_min_price_cmd(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(min_price=int(message.text))
        await message.answer('üíé–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞.')
        await state.set_state(HotelSearchMachine.max_price)


@user_router.message(HotelSearchMachine.max_price)
async def set_max_price_cmd(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(max_price=int(message.text))
        await message.answer('‚úÖ<b>–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ!</b>\n‚úâÔ∏è–≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.')
        data = await state.get_data()
        try:
            hotels = get_hotels_request(data)
        except KeyError:
            await message.answer(
                '<b>‚ùóÔ∏è–ß—Ç–æ —Ç–æ –ø–æ—à–ª–µ –Ω–µ —Ç–∞–∫. –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω‚ùóÔ∏è</b>\n\n–í–æ–∑–º–æ–∂–æ:     ‚Ä¢ –Ω–µ –≤–µ—Ä–Ω—ã–π –∫–ª—é—á –∞–ø–∏\n     ‚Ä¢ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã\n     ‚Ä¢ –æ—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
        else:
            total_days = make_total_days(data)
            await state.clear()
            await state.update_data(hotels=hotels, scroll_index=0, total_days=total_days)
            data = await state.get_data()
            await message.answer('‚úÖ<b>–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!</b>', reply_markup=scroll_hotel_keyboard())
            page = make_hotel_page(data)
            media_group = await message.answer_media_group(media=page[0])
            info = await message.answer(page[1])
            await state.update_data(current_hotel=(media_group, info))


@user_router.message(F.text == '<')
async def scroll_left_button(message: Message, state: FSMContext):
    await message.delete()
    data = await state.get_data()
    index = data['scroll_index']

    if index >= 1:
        for msg in data['current_hotel'][0]:
            await msg.delete()
        await data['current_hotel'][1].delete()

        await state.update_data(scroll_index=index - 1)
        data = await state.get_data()
        page = make_hotel_page(data)
        media_group = await message.answer_media_group(media=page[0])
        info = await message.answer(page[1])
        await state.update_data(current_hotel=(media_group, info))
    else:
        notify = await message.answer('–≠—Ç–æ –ø–µ—Ä–≤—ã—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ª–∏—Å—Ç–∞—Ç—å –Ω–∞–∑–∞–¥!')
        await sleep(2)
        await notify.delete()


@user_router.message(F.text == '>')
async def scroll_left_button(message: Message, state: FSMContext):
    await message.delete()
    data = await state.get_data()
    index = data['scroll_index']

    try:
        await state.update_data(scroll_index=index + 1)
        data = await state.get_data()
        page = make_hotel_page(data)
        media_group = await message.answer_media_group(media=page[0])
        info = await message.answer(page[1])
        await state.update_data(current_hotel=(media_group, info))
    except IndexError:
        await state.update_data(scroll_index=index - 1)
        notify = await message.answer('–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ª–∏—Å—Ç–∞—Ç—å –≤–ø–µ—Ä–µ–¥!')
        await sleep(2)
        await notify.delete()
    else:
        for msg in data['current_hotel'][0]:
            await msg.delete()
        await data['current_hotel'][1].delete()


@user_router.message(F.text == '–í—ã–±—Ä–∞—Ç—å‚úÖ')
async def choose_hotel_cmd(message: Message, state: FSMContext, pool: Pool):
    data = await state.get_data()
    hotels, index = data['hotels'], data['scroll_index']
    current_hotel: HotelInfo = data['hotels'][index]._asdict()
    if await insert_hotel(current_hotel, pool, message.from_user.id):
        for msg in data['current_hotel'][0]:
            await msg.delete()
        await data['current_hotel'][1].delete()
        await message.answer(
            f'<b>–í—ã–±—Ä–∞–Ω –æ—Ç–µ–ª—å - {hotels[index].name}</b>\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–æ–ª–µ–π –∫–æ–º–∞–Ω–¥–æ–π - <code>/history</code>',
            reply_markup=ReplyKeyboardRemove())
    else:
        notify = await message.answer('–£ –≤–∞—Å —É–∂–µ –≤—ã–±—Ä–∞–Ω –æ—Ç–µ–ª—å —Å –¥–∞–Ω–Ω–æ–º –Ω–æ–º–µ—Ä–æ–º!')
        await notify.delete()
        await message.delete()
